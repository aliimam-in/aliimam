import * as React from 'react';
import type { IconProps, IconMetadata, IconComponent } from '<%= "../".repeat(icon.types[0].split("/").length) %>types';

<% /* A. Variants for both size and type */ %>
<% if (icon.sizes.length > 1 && icon.types.length > 1) { %>
interface <%- iconToPropsName(icon) %> extends IconProps {
  size<%- icon.sizes[0] === getDefaultSize() ? '?' : '' %>: <%- icon.sizes.map(s => `"${s}"`).join(' | ') %>;
  type<%- icon.types[0] === getDefaultType() ? '?' : '' %>: <%- icon.types.map(t => `"${t}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className, 
    size<%- icon.sizes[0] === getDefaultSize() ? ` = '${icon.sizes[0]}'` : '' %>,
    type<%- icon.types[0] === getDefaultType() ? ` = '${icon.types[0]}'` : '' %>,
    ...props
  }, forwardedRef) {
<%   for (const t in icon.types) { %>
<%     for (const s in icon.sizes) { %>
<%       if (iconHasSizeAndType(icon, icon.sizes[s], icon.types[t])) { %>
    if (type === '<%- icon.types[t] %>' && size === '<%- icon.sizes[s] %>') {
      return <%- iconToSVGSourceAsJSX(icon, icon.sizes[s], icon.types[t]) %>
    }
<%       } %>
<%     } %>
<%   } %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support the combination of ${size} and ${type}`)
    return null
  }
);

<% /* B. Only size variants */ %>
<% } else if (icon.sizes.length > 1) { %>
interface <%- iconToPropsName(icon) %> extends IconProps {
  size<%- icon.sizes[0] === getDefaultSize() ? '?' : '' %>: <%- icon.sizes.map(s => `"${s}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className, 
    size<%- icon.sizes[0] === getDefaultSize() ? ` = '${icon.sizes[0]}'` : '' %>,
    ...props
  }, forwardedRef) {
<%   for (const s in icon.sizes) { %>
<%     if (iconHasSizeAndType(icon, icon.sizes[s], icon.types[0])) { %>
    if (size === '<%- icon.sizes[s] %>') {
      return <%- iconToSVGSourceAsJSX(icon, icon.sizes[s], icon.types[0]) %>
    }
<%     } %>
<%   } %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support ${size}`)
    return null
  }
);

<% /* C. Only type variants */ %>
<% } else if (icon.types.length > 1) { %>
<%
// Helper function to strip /name suffix from type
const cleanType = (type) => type.split('/')[0];
// Generate cleaned types for the interface and component logic
const cleanedTypes = icon.types.map(cleanType);
// Ensure unique types (in case multiple types map to the same base, e.g., stroke/ali and stroke/bob)
const uniqueCleanedTypes = [...new Set(cleanedTypes)];
// Determine default type: use "stroke" if available, otherwise first type
const defaultType = uniqueCleanedTypes.includes('stroke') ? 'stroke' : uniqueCleanedTypes[0];
%>
interface <%- iconToPropsName(icon) %> extends IconProps {
  type?: <%- uniqueCleanedTypes.map(t => `"${t}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent<<%- iconToPropsName(icon) %>> = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    type = '<%- defaultType %>',
    ...props
  }, forwardedRef) {
<%   for (const t in icon.types) { %>
<%     if (iconHasSizeAndType(icon, icon.sizes[0], icon.types[t])) { %>
    if (type === '<%- cleanType(icon.types[t]) %>') {
      return <%- iconToSVGSourceAsJSX(icon, icon.sizes[0], icon.types[t]) %>
    }
<%     } %>
<%   } %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support ${type}`)
    return null
  }
);

<% /* D. No variants */ %>
<% } else { %>
export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, IconProps>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className, 
    ...props
  }, forwardedRef) {
    return <%- iconToSVGSourceAsJSX(icon, icon.sizes[0], icon.types[0]) %>
  }
);

<% } %>

<%- iconToComponentName(icon) %>.displayName = "<%- iconToComponentName(icon) %>";

<% if (icon.metadata) { %>
<%- iconToComponentName(icon) %>.metadata = <%- JSON.stringify(icon.metadata, null, 2) %> as IconMetadata;

<% } %>
export default <%- iconToComponentName(icon) %>;