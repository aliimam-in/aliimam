import * as React from 'react';
import type { IconProps, IconMetadata, IconComponent } from '../types';

<% /* A. Variants for both size and type */ %>
<% if (icon.sizes.length > 1 && icon.types.length > 1) { %>
interface <%- iconToPropsName(icon) %> extends IconProps {
  size<%- icon.sizes[0] === getDefaultSize() ? '?' : '' %>: <%- icon.sizes.map(s => `"${s}"`).join(' | ') %>;
  type<%- icon.types[0] === getDefaultType() ? '?' : '' %>: <%- icon.types.map(t => `"${t}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    variant = 'stroke',
    size<%- icon.sizes[0] === getDefaultSize() ? ` = '${icon.sizes[0]}'` : '' %>,
    type<%- icon.types[0] === getDefaultType() ? ` = '${icon.types[0]}'` : '' %>,
    ...props
  }, forwardedRef) {
<%   icon.types.forEach((t, tIndex) => { %>
<%     icon.sizes.forEach((s, sIndex) => { %>
<%       if (iconHasSizeAndType(icon, s, t)) { %>
    if (type === '<%- t %>' && size === '<%- s %>') {
      return <%- iconToSVGSourceAsJSX(icon, s, t) %>
    }
<%       } %>
<%     }) %>
<%   }) %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support the combination of ${size} and ${type}`);
    return null;
  }
);

<% /* B. Only size variants */ %>
<% } else if (icon.sizes.length > 1) { %>
interface <%- iconToPropsName(icon) %> extends IconProps {
  size<%- icon.sizes[0] === getDefaultSize() ? '?' : '' %>: <%- icon.sizes.map(s => `"${s}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    variant = 'stroke',
    size<%- icon.sizes[0] === getDefaultSize() ? ` = '${icon.sizes[0]}'` : '' %>,
    ...props
  }, forwardedRef) {
<%   icon.sizes.forEach((s, sIndex) => { %>
<%     if (iconHasSizeAndType(icon, s, icon.types[0])) { %>
    if (size === '<%- s %>') {
      return <%- iconToSVGSourceAsJSX(icon, s, icon.types[0]) %>
    }
<%     } %>
<%   }) %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support ${size}`);
    return null;
  }
);

<% /* C. Only type variants */ %>
<% } else if (icon.types.length > 1) { %>
interface <%- iconToPropsName(icon) %> extends IconProps {
  type<%- icon.types[0] === getDefaultType() ? '?' : '' %>: <%- icon.types.map(t => `"${t}"`).join(' | ') %>;
}

export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, <%- iconToPropsName(icon) %>>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    variant = 'stroke',
    type<%- icon.types[0] === getDefaultType() ? ` = '${icon.types[0]}'` : '' %>,
    ...props
  }, forwardedRef) {
<%   icon.types.forEach((t, tIndex) => { %>
<%     if (iconHasSizeAndType(icon, icon.sizes[0], t)) { %>
    if (type === '<%- t %>') {
      return <%- iconToSVGSourceAsJSX(icon, icon.sizes[0], t) %>
    }
<%     } %>
<%   }) %>
    console.error(`<%- iconToComponentName(icon) %> doesn't support ${type}`);
    return null;
  }
);

<% /* D. No variants */ %>
<% } else { %>
export const <%- iconToComponentName(icon) %>: IconComponent = React.forwardRef<SVGSVGElement, IconProps>(
  function <%- iconToComponentName(icon) %>({
    color = 'currentColor',
    fill,
    strokeWidth,
    strokeLinecap,
    strokeLinejoin,
    strokeDasharray,
    opacity,
    className,
    variant = 'stroke',
    ...props
  }, forwardedRef) {
    return <%- iconToSVGSourceAsJSX(icon, icon.sizes[0], icon.types[0]) %>
  }
);

<% } %>

<%- iconToComponentName(icon) %>.displayName = "<%- iconToComponentName(icon) %>";

<% if (icon.metadata) { %>
<%- iconToComponentName(icon) %>.metadata = <%- JSON.stringify(icon.metadata, null, 2) %> as IconMetadata;

<% } %>
export default <%- iconToComponentName(icon) %>;