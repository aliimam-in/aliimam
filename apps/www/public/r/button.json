{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "registry/default/ui/button.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { motion } from \"framer-motion\";\nimport { cn } from \"@/registry/default/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        border:\n          \"from-primary to-primary/50 text-primary-foreground border border-primary bg-gradient-to-t shadow-lg shadow-primary ring-2 ring-offset-[2px] ring-offset-background/50 ring-background/50 transition-[filter] duration-200 hover:brightness-120 active:brightness-100\",\n        destructive:\n          \"bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n        metal: \"\",\n        shine:\n          \"bg-[linear-gradient(110deg,#000000,45%,#303030,55%,#000000)] text-white px-4 py-2 transition-colors dark:bg-[linear-gradient(110deg,#000103,45%,#303030,55%,#000103)] animate-shine items-center justify-center rounded-xl border border-border bg-[length:400%_100%]\",\n        \"liquid-glass\": \"\",\n        \"animated-border\":\n          \"relative rounded-xl border border-primary/10 bg-background px-4 py-2 duration-200 hover:bg-primary/10\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        md: \"h-9 rounded-md px-6 has-[>svg]:px-4\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        xl: \"h-11 rounded-md px-6 has-[>svg]:px-4\",\n        xxl: \"h-14 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n        iconxl: \"size-12\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\ninterface ButtonProps\n  extends React.ComponentProps<\"button\">,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: ButtonProps) {\n  const Comp = asChild ? Slot : \"button\";\n  const [isPressed, setIsPressed] = React.useState(false);\n  const [isHovered, setIsHovered] = React.useState(false);\n  const [isTouchDevice, setIsTouchDevice] = React.useState(false);\n\n  React.useEffect(() => {\n    setIsTouchDevice(\"ontouchstart\" in window || navigator.maxTouchPoints > 0);\n  }, []);\n\n  const handleMouseDown = () => setIsPressed(true);\n  const handleMouseUp = () => setIsPressed(false);\n  const handleMouseLeave = () => {\n    setIsPressed(false);\n    setIsHovered(false);\n  };\n  const handleMouseEnter = () => {\n    if (!isTouchDevice) setIsHovered(true);\n  };\n  const handleTouchStart = () => setIsPressed(true);\n  const handleTouchEnd = () => setIsPressed(false);\n  const handleTouchCancel = () => setIsPressed(false);\n\n  if (variant === \"liquid-glass\") {\n    return (\n      <div className=\"relative duration-200 hover:scale-105 inline-flex rounded-md\">\n        <div className=\"absolute top-0 left-0 z-0 h-full w-full rounded-md shadow-[0_0_6px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3px_rgba(0,0,0,0.9),inset_-3px_-3px_0.5px_-3px_rgba(0,0,0,0.85),inset_1px_1px_1px_-0.5px_rgba(0,0,0,0.6),inset_-1px_-1px_1px_-0.5px_rgba(0,0,0,0.6),inset_0_0_6px_6px_rgba(0,0,0,0.12),inset_0_0_2px_2px_rgba(0,0,0,0.06),0_0_12px_rgba(255,255,255,0.15)] transition-all dark:shadow-[0_0_8px_rgba(0,0,0,0.03),0_2px_6px_rgba(0,0,0,0.08),inset_3px_3px_0.5px_-3.5px_rgba(255,255,255,0.09),inset_-3px_-3px_0.5px_-3.5px_rgba(255,255,255,0.85),inset_1px_1px_1px_-0.5px_rgba(255,255,255,0.6),inset_-1px_-1px_1px_-0.5px_rgba(255,255,255,0.6),inset_0_0_6px_6px_rgba(255,255,255,0.12),inset_0_0_2px_2px_rgba(255,255,255,0.06),0_0_12px_rgba(0,0,0,0.15)]\" />\n        <div\n          className=\"absolute top-0 left-0 isolate -z-10 h-full w-full overflow-hidden rounded-md\"\n           \n        /> \n        <Comp\n          data-slot=\"button\"\n          className={cn(\n            buttonVariants({ variant, size, className }),\n            \"relative z-10 text-primary\"\n          )}\n          {...props}\n        />\n      </div>\n    );\n  }\n\n  if (variant === \"animated-border\") {\n    return (\n      <motion.div className=\"relative inline-flex rounded-md\" initial={{}}>\n        <div\n          className={cn(\n            \"-inset-px pointer-events-none absolute rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box]\",\n            \"[mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]\"\n          )}\n        >\n          <motion.div\n            className={cn(\n              \"absolute aspect-square bg-gradient-to-r from-transparent via-primary to-primary\",\n              \"dark:from-transparent dark:via-primary dark:to-primary\"\n            )}\n            animate={{\n              offsetDistance: [\"0%\", \"100%\"],\n            }}\n            style={{\n              width: 20,\n              offsetPath: `rect(0 auto auto 0 round 12px)`,\n            }}\n            transition={{\n              repeat: Number.POSITIVE_INFINITY,\n              duration: 5,\n              ease: \"linear\",\n            }}\n          />\n        </div>\n        <Comp\n          data-slot=\"button\"\n          className={cn(\n            buttonVariants({ variant, size, className }),\n            \"relative z-10 text-primary\"\n          )}\n          {...props}\n        />\n      </motion.div>\n    );\n  }\n\n  if (variant === \"metal\") {\n    return (\n      <div\n        className=\"relative inline-flex rounded-md duration-200 hover:scale-105\"\n        style={{\n          transform: isPressed ? \"translateY(2px) scale(0.98)\" : undefined,\n          boxShadow: isPressed\n            ? \"0 1px 2px rgba(0,0,0,0.15)\"\n            : isHovered\n              ? \"0 4px 12px rgba(0,0,0,0.12)\"\n              : \"0 3px 8px rgba(0,0,0,0.08)\",\n          transition: \"all 250ms cubic-bezier(0.1, 0.4, 0.2, 1)\",\n        }}\n      >\n        <div className=\"absolute inset-0 rounded-md bg-gradient-to-b from-primary via-secondary to-primary\" />\n\n        <div\n          className=\"absolute inset-[1px] transform-gpu rounded-lg will-change-transform bg-gradient-to-b from-primary via-secondary to-primary\"\n          style={{\n            filter: isHovered && !isPressed ? \"brightness(1.05)\" : \"none\",\n            transition: \"all 250ms cubic-bezier(0.1, 0.4, 0.2, 1)\",\n          }}\n        /> \n        <Comp\n          data-slot=\"button\"\n          className={cn(\n            buttonVariants({ size, className }),\n            \"relative z-10 m-[1px] inline-flex h-11 transform-gpu cursor-pointer items-center justify-center overflow-hidden ring ring-offset rounded-md px-8 py-2 text-sm leading-none font-semibold will-change-transform outline-none bg-gradient-to-b from-primary via-primary-foreground to-primary text-primary [text-shadow:_0_-1px_0_rgb(var(--primary)_/_100%)]\"\n          )}\n          onMouseDown={handleMouseDown}\n          onMouseUp={handleMouseUp}\n          onMouseLeave={handleMouseLeave}\n          onMouseEnter={handleMouseEnter}\n          onTouchStart={handleTouchStart}\n          onTouchEnd={handleTouchEnd}\n          onTouchCancel={handleTouchCancel}\n          {...props}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n ",
      "type": "registry:ui"
    }
  ]
}