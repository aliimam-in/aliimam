{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dino-game",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/default/components/dino-game.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\n\ntype GameState = \"ready\" | \"playing\" | \"gameover\";\n\ntype Obstacle = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n};\n\ntype DinoGameProps = {\n  dinoColor?: string;\n  obstacleColor?: string;\n  groundColor?: string;\n  backgroundColor?: string;\n  accentColor?: string;\n  initialSpeed?: number;\n  jumpPower?: number;\n  gravity?: number;\n};\n\nexport function DinoGame({\n  dinoColor = \"#fff200\",\n  obstacleColor,\n  groundColor,\n  backgroundColor,\n  accentColor,\n  initialSpeed = 5,\n  jumpPower = 15,\n  gravity = 0.8,\n}: DinoGameProps = {}) {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const rafRef = useRef<number | null>(null);\n\n  const stateRef = useRef<GameState>(\"ready\");\n  const scoreRef = useRef(0);\n  const bestRef = useRef(0);\n  const lastTimeRef = useRef<number | null>(null);\n \n  const groundYRef = useRef(300);\n\n  const speedRef = useRef(initialSpeed);\n  const dinoRef = useRef({ x: 60, y: 0, w: 20, h: 40, vy: 0 });\n  const obstaclesRef = useRef<Obstacle[]>([]);\n  const spawnTimerRef = useRef(0);\n  const nextSpawnRef = useRef(1000);\n  const colorsRef = useRef({\n    bg: \"#ffffff\",\n    fg: \"#111111\",\n    accent: \"#0ea5e9\",\n    muted: \"#e5e7eb\",\n    dino: dinoColor,\n  });\n\n  function readCssVar(name: string, fallback: string) {\n    try {\n      const v = getComputedStyle(document.documentElement)\n        .getPropertyValue(name)\n        .trim();\n      return v || fallback;\n    } catch {\n      return fallback;\n    }\n  }\n\n  function initColors() {\n    colorsRef.current = {\n      bg:\n        backgroundColor ||\n        readCssVar(\"--color-background\", readCssVar(\"--background\", \"#ffffff\")),\n      fg:\n        obstacleColor ||\n        readCssVar(\"--color-foreground\", readCssVar(\"--foreground\", \"#111111\")),\n      accent: accentColor || readCssVar(\"--color-primary\", \"#0ea5e9\"),\n      muted: groundColor || readCssVar(\"--color-muted\", \"#e5e7eb\"),\n      dino: dinoColor,\n    };\n  }\n\n  function resetGame(canvas: HTMLCanvasElement) {\n    stateRef.current = \"ready\";\n    scoreRef.current = 0;\n    speedRef.current = initialSpeed;\n    obstaclesRef.current = [];\n    spawnTimerRef.current = 0;\n    nextSpawnRef.current = 800 + Math.random() * 800;\n    const groundY = groundYRef.current;\n    dinoRef.current = { x: 20, y: groundY - 44, w: 10, h: 50, vy: 0 };\n    lastTimeRef.current = null;\n    drawIntro(canvas);\n  }\n\n  function jump() {\n    const dino = dinoRef.current;\n    const groundY = groundYRef.current;\n    if (dino.y >= groundY - dino.h - 0.5) {\n      dino.vy = -jumpPower;\n    }\n  }\n\n  function aabb(\n    a: { x: number; y: number; w: number; h: number },\n    b: { x: number; y: number; w: number; h: number }\n  ) {\n    return (\n      a.x < b.x + b.w && a.x + a.w > b.x && a.y < b.y + b.h && a.y + a.h > b.y\n    );\n  }\n\n  function drawIntro(canvas: HTMLCanvasElement) {\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n    const { bg, fg, muted, accent, dino: dinoCol } = colorsRef.current;\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = Math.max(640, Math.floor(rect.width * dpr)); \n    canvas.height = Math.floor(400 * dpr);\n\n    ctx.scale(dpr, dpr);\n    ctx.fillStyle = bg;\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    ctx.fillStyle = muted;\n    const groundY = groundYRef.current;\n    ctx.fillRect(0, groundY + 1, canvas.width, 2);\n\n    const dino = dinoRef.current;\n    ctx.fillStyle = dinoCol;\n    ctx.fillRect(dino.x, dino.y, dino.w, dino.h);\n\n    ctx.fillStyle = fg;\n    ctx.fillText(\"Dino\", 24, 36);\n\n    ctx.fillStyle = accent;\n    ctx.fillText(\"Press Space or Tap to Start\", 24, 60);\n    ctx.fillStyle = fg;\n    ctx.fillText(\"Press Space to Jump\", 24, 80);\n\n    const best = bestRef.current;\n    if (best > 0) {\n      ctx.textAlign = \"right\";\n      ctx.fillText(`Best: ${best}`, canvas.width / dpr - 16, 28);\n      ctx.textAlign = \"start\";\n    }\n\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  let loop: (timestamp: number) => void = () => {};\n\n  useEffect(() => {\n    initColors();\n    try {\n      const saved = localStorage.getItem(\"dino-best-score\");\n      bestRef.current = saved ? Number.parseInt(saved, 10) || 0 : 0;\n    } catch {\n      bestRef.current = 0;\n    }\n\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    resetGame(canvas);\n\n    const keydown = (e: KeyboardEvent) => {\n      if (\n        e.code === \"Space\" ||\n        e.key === \" \" ||\n        e.key === \"Spacebar\" ||\n        e.code === \"ArrowUp\"\n      ) {\n        e.preventDefault();\n        if (stateRef.current === \"ready\") {\n          stateRef.current = \"playing\";\n        }\n        if (stateRef.current === \"playing\") {\n          jump();\n        } else if (stateRef.current === \"gameover\") {\n          resetGame(canvas);\n          stateRef.current = \"playing\";\n        }\n      }\n    };\n\n    const interact = () => {\n      if (stateRef.current === \"ready\") {\n        stateRef.current = \"playing\";\n      } else if (stateRef.current === \"playing\") {\n        jump();\n      } else if (stateRef.current === \"gameover\") {\n        resetGame(canvas);\n        stateRef.current = \"playing\";\n      }\n    };\n\n    window.addEventListener(\"keydown\", keydown);\n    canvas.addEventListener(\"pointerdown\", interact, { passive: true });\n\n    const observer = new MutationObserver(() => initColors());\n    observer.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"class\", \"style\"],\n    });\n\n    const run = (t: number) => {\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) return;\n\n      const dpr = window.devicePixelRatio || 1;\n      const rect = canvas.getBoundingClientRect();\n      const targetWidth = Math.max(640, Math.floor(rect.width * dpr)); \n      const targetHeight = Math.floor(400 * dpr);\n      if (canvas.width !== targetWidth || canvas.height !== targetHeight) {\n        canvas.width = targetWidth;\n        canvas.height = targetHeight;\n      }\n\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\n      const width = canvas.width / dpr;\n      const height = canvas.height / dpr;\n\n      const { bg, fg, muted, accent, dino: dinoCol } = colorsRef.current;\n\n      let dt = 16;\n      if (lastTimeRef.current != null)\n        dt = Math.min(150, t - lastTimeRef.current);\n      lastTimeRef.current = t;\n\n      ctx.fillStyle = bg;\n      ctx.fillRect(0, 0, width, height);\n\n      const groundY = groundYRef.current;\n\n      ctx.fillStyle = muted;\n      ctx.fillRect(0, groundY + 1, width, 2);\n\n      const dino = dinoRef.current;\n\n      if (stateRef.current === \"playing\") {\n        const targetSpeed = initialSpeed + Math.min(8, scoreRef.current / 100);\n        speedRef.current = speedRef.current * 0.98 + targetSpeed * 0.02;\n\n        dino.vy += gravity;\n        dino.y += dino.vy;\n        if (dino.y > groundY - dino.h) {\n          dino.y = groundY - dino.h;\n          dino.vy = 0;\n        }\n\n        spawnTimerRef.current += dt;\n        if (spawnTimerRef.current >= nextSpawnRef.current) {\n          spawnTimerRef.current = 0;\n          nextSpawnRef.current = 700 + Math.random() * 900;\n          const heightVariant = 30 + Math.random() * 30;\n          obstaclesRef.current.push({\n            x: width + 20,\n            y: groundY - heightVariant,\n            w: 20 + Math.random() * 18,\n            h: heightVariant,\n          });\n        }\n\n        const spd = speedRef.current;\n        obstaclesRef.current.forEach((o) => (o.x -= spd));\n        obstaclesRef.current = obstaclesRef.current.filter(\n          (o) => o.x + o.w > -40\n        );\n\n        scoreRef.current += dt * 0.02;\n      }\n\n      ctx.fillStyle = fg;\n      for (const o of obstaclesRef.current) {\n        ctx.fillRect(o.x, o.y, o.w, o.h);\n      }\n\n      ctx.fillStyle = dinoCol;\n      ctx.fillRect(dino.x, dino.y, dino.w, dino.h);\n\n      if (stateRef.current === \"playing\") {\n        for (const o of obstaclesRef.current) {\n          if (aabb(dino, o)) {\n            stateRef.current = \"gameover\";\n            const score = Math.floor(scoreRef.current);\n            if (score > bestRef.current) {\n              bestRef.current = score;\n              try {\n                localStorage.setItem(\"dino-best-score\", String(bestRef.current));\n              } catch {}\n            }\n            break;\n          }\n        }\n      }\n\n      ctx.fillStyle = fg;\n      ctx.textAlign = \"right\";\n      ctx.fillText(`Score: ${Math.floor(scoreRef.current)}`, width - 16, 28);\n      if (bestRef.current > 0) {\n        ctx.fillText(`Best: ${bestRef.current}`, width - 16, 48);\n      }\n      ctx.textAlign = \"start\";\n\n      if (stateRef.current === \"ready\") {\n        ctx.fillStyle = accent;\n        ctx.fillText(\"Press Space or Tap to Start\", 24, 60);\n      } else if (stateRef.current === \"gameover\") {\n        ctx.fillStyle = accent;\n        ctx.fillText(\"Game Over\", 4, 60);\n        ctx.fillText(\"Press Space or Tap to Restart\", 24, 84);\n      }\n\n      rafRef.current = requestAnimationFrame(run);\n    };\n\n    loop = run;\n    rafRef.current = requestAnimationFrame(loop);\n\n    return () => {\n      if (rafRef.current != null) cancelAnimationFrame(rafRef.current);\n      window.removeEventListener(\"keydown\", keydown);\n      canvas.removeEventListener(\"pointerdown\", interact);\n      observer.disconnect();\n    };\n  }, [\n    dinoColor,\n    obstacleColor,\n    groundColor,\n    backgroundColor,\n    accentColor,\n    initialSpeed,\n    jumpPower,\n    gravity,\n  ]);\n\n  return (\n    <div className=\"w-full h-full mx-auto max-w-5xl\">\n      <canvas\n        ref={canvasRef}\n        style={{ width: \"100%\", height: \"100%\", display: \"block\" }}\n        aria-label=\"Dino game canvas. Press Space to jump; tap or click on the canvas on touch devices.\"\n        role=\"img\"\n      />\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}