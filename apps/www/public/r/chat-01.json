{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "chat-01",
  "type": "registry:block",
  "description": "A simple chat section.",
  "files": [
    {
      "path": "registry/default/blocks/chat/chat-01/page.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { ArrowUpIcon, CheckIcon, PlusIcon } from \"lucide-react\"\n\nimport { cn } from \"@/registry/default/lib/utils\"\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/registry/default/ui/avatar\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/registry/default/ui/card\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/registry/default/ui/dialog\"\nimport { Input } from \"@/registry/default/ui/input\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/registry/default/ui/tooltip\"\n\nconst users = [\n  {\n    name: \"Olivia Martin\",\n    email: \"m@example.com\",\n    avatar: \"/avatars/01.png\",\n  },\n  {\n    name: \"Isabella Nguyen\",\n    email: \"isabella.nguyen@email.com\",\n    avatar: \"/avatars/03.png\",\n  },\n  {\n    name: \"Emma Wilson\",\n    email: \"emma@example.com\",\n    avatar: \"/avatars/05.png\",\n  },\n  {\n    name: \"Jackson Lee\",\n    email: \"lee@example.com\",\n    avatar: \"/avatars/02.png\",\n  },\n  {\n    name: \"William Kim\",\n    email: \"will@email.com\",\n    avatar: \"/avatars/04.png\",\n  },\n] as const\n\ntype User = (typeof users)[number]\n\nexport default function CardsChat() {\n  const [open, setOpen] = React.useState(false)\n  const [selectedUsers, setSelectedUsers] = React.useState<User[]>([])\n\n  const [messages, setMessages] = React.useState([\n    {\n      role: \"agent\",\n      content: \"Hi, how can I help you today?\",\n    },\n    {\n      role: \"user\",\n      content: \"Hey, I'm having trouble with my account.\",\n    },\n    {\n      role: \"agent\",\n      content: \"What seems to be the problem?\",\n    },\n    {\n      role: \"user\",\n      content: \"I can't log in.\",\n    },\n  ])\n  const [input, setInput] = React.useState(\"\")\n  const inputLength = input.trim().length\n\n  return (\n    <>\n      <Card>\n        <CardHeader className=\"flex flex-row items-center\">\n          <div className=\"flex items-center gap-4\">\n            <Avatar className=\"border\">\n              <AvatarImage src=\"/avatars/01.png\" alt=\"Image\" />\n              <AvatarFallback>S</AvatarFallback>\n            </Avatar>\n            <div className=\"flex flex-col gap-0.5\">\n              <p className=\"text-sm leading-none font-medium\">Sofia Davis</p>\n              <p className=\"text-muted-foreground text-xs\">m@example.com</p>\n            </div>\n          </div>\n          <TooltipProvider delayDuration={0}>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  size=\"icon\"\n                  variant=\"secondary\"\n                  className=\"ml-auto size-8 rounded-full\"\n                  onClick={() => setOpen(true)}\n                >\n                  <PlusIcon />\n                  <span className=\"sr-only\">New message</span>\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent sideOffset={10}>New message</TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col gap-4\">\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className={cn(\n                  \"flex w-max max-w-[75%] flex-col gap-2 rounded-lg px-3 py-2 text-sm\",\n                  message.role === \"user\"\n                    ? \"bg-primary text-primary-foreground ml-auto\"\n                    : \"bg-muted\"\n                )}\n              >\n                {message.content}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n        <CardFooter>\n          <form\n            onSubmit={(event) => {\n              event.preventDefault()\n              if (inputLength === 0) return\n              setMessages([\n                ...messages,\n                {\n                  role: \"user\",\n                  content: input,\n                },\n              ])\n              setInput(\"\")\n            }}\n            className=\"relative w-full\"\n          >\n            <Input\n              id=\"message\"\n              placeholder=\"Type your message...\"\n              className=\"flex-1 pr-10\"\n              autoComplete=\"off\"\n              value={input}\n              onChange={(event) => setInput(event.target.value)}\n            />\n            <Button\n              type=\"submit\"\n              size=\"icon\"\n              className=\"absolute top-1/2 right-2 size-6 -translate-y-1/2 rounded-full\"\n              disabled={inputLength === 0}\n            >\n              <ArrowUpIcon className=\"size-3.5\" />\n              <span className=\"sr-only\">Send</span>\n            </Button>\n          </form>\n        </CardFooter>\n      </Card>\n      <Dialog open={open} onOpenChange={setOpen}>\n        <DialogContent className=\"gap-0 p-0 outline-none\">\n          <DialogHeader className=\"px-4 pt-5 pb-4\">\n            <DialogTitle>New message</DialogTitle>\n            <DialogDescription>\n              Invite a user to this thread. This will create a new group\n              message.\n            </DialogDescription>\n          </DialogHeader>\n          <Command className=\"overflow-hidden rounded-t-none border-t bg-transparent\">\n            <CommandInput placeholder=\"Search user...\" />\n            <CommandList>\n              <CommandEmpty>No users found.</CommandEmpty>\n              <CommandGroup>\n                {users.map((user) => (\n                  <CommandItem\n                    key={user.email}\n                    data-active={selectedUsers.includes(user)}\n                    className=\"data-[active=true]:opacity-50\"\n                    onSelect={() => {\n                      if (selectedUsers.includes(user)) {\n                        return setSelectedUsers(\n                          selectedUsers.filter(\n                            (selectedUser) => selectedUser !== user\n                          )\n                        )\n                      }\n\n                      return setSelectedUsers(\n                        [...users].filter((u) =>\n                          [...selectedUsers, user].includes(u)\n                        )\n                      )\n                    }}\n                  >\n                    <Avatar className=\"border\">\n                      <AvatarImage src={user.avatar} alt=\"Image\" />\n                      <AvatarFallback>{user.name[0]}</AvatarFallback>\n                    </Avatar>\n                    <div className=\"ml-2\">\n                      <p className=\"text-sm leading-none font-medium\">\n                        {user.name}\n                      </p>\n                      <p className=\"text-muted-foreground text-sm\">\n                        {user.email}\n                      </p>\n                    </div>\n                    {selectedUsers.includes(user) ? (\n                      <CheckIcon className=\"text-primary ml-auto flex size-4\" />\n                    ) : null}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n          <DialogFooter className=\"flex items-center border-t p-4 sm:justify-between\">\n            {selectedUsers.length > 0 ? (\n              <div className=\"flex -space-x-2 overflow-hidden\">\n                {selectedUsers.map((user) => (\n                  <Avatar key={user.email} className=\"inline-block border\">\n                    <AvatarImage src={user.avatar} />\n                    <AvatarFallback>{user.name[0]}</AvatarFallback>\n                  </Avatar>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-muted-foreground text-sm\">\n                Select users to add to this thread.\n              </p>\n            )}\n            <Button\n              disabled={selectedUsers.length < 2}\n              size=\"sm\"\n              onClick={() => {\n                setOpen(false)\n              }}\n            >\n              Continue\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </>\n  )\n}",
      "type": "registry:component",
      "target": "components/chat-01.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "800px"
  },
  "categories": [
    "chat",
    "ai"
  ]
}