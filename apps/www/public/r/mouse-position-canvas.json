{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "mouse-position-canvas",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/default/components/mouse-position-canvas.tsx",
      "content": "//@ts-nocheck\n\"use client\"\n\nimport { useEffect, useRef } from \"react\"\n\ntype MousePositionCanvasProps = {\n  colors?: string[]\n  gridSize?: number\n  particleCount?: number\n  fadeSpeed?: number\n  className?: string\n  transparentBackground?: boolean\n}\n\nexport function MousePositionCanvas({\n  colors = [\"#ff0000\", \"#00ff00\", \"#0000ff\"],\n  gridSize = 8,\n  particleCount = 200,\n  fadeSpeed = 0.01,\n  className = \"\",\n  transparentBackground = true,\n}: MousePositionCanvasProps) {\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n\n  useEffect(() => {\n    const canvas = canvasRef.current\n    if (!canvas) return\n\n    const ctx = canvas.getContext(\"2d\", { alpha: transparentBackground })\n    if (!ctx) return\n\n    let width = window.innerWidth\n    let height = window.innerHeight\n    let pixels: Array<[number, number, number, number, string, number]> = []\n    const coloredPixels: Array<{\n      x: number\n      y: number\n      alpha: number\n      color: string\n      vx: number\n      vy: number\n    }> = []\n    let currentPixel = 0\n    const mousePosition = { x: width / 2, y: height / 2 }\n\n    const drawGrid = () => {\n      ctx.clearRect(0, 0, width, height)\n\n      for (let i = 0; i < pixels.length; i++) {\n        pixels[i][4] = transparentBackground ? \"transparent\" : \"#222\"\n        pixels[i][5] = 1\n      }\n\n      for (let i = 0; i < coloredPixels.length; i++) {\n        const pix =\n          Math.floor(coloredPixels[i].y / gridSize) * (Math.floor(width / gridSize) + 1) +\n          Math.floor(coloredPixels[i].x / gridSize)\n        if (pixels[pix]) {\n          pixels[pix][4] = coloredPixels[i].color\n          pixels[pix][5] = coloredPixels[i].alpha\n        }\n\n        if (coloredPixels[i].alpha > 0) coloredPixels[i].alpha -= fadeSpeed\n        if (coloredPixels[i].alpha < 0) coloredPixels[i].alpha = 0\n        coloredPixels[i].x += coloredPixels[i].vx\n        coloredPixels[i].y += coloredPixels[i].vy\n      }\n\n      for (let i = 0; i < pixels.length; i++) {\n        ctx.globalAlpha = pixels[i][5]\n        ctx.fillStyle = pixels[i][4]\n        ctx.fillRect(pixels[i][0], pixels[i][1], pixels[i][2], pixels[i][3])\n      }\n    }\n\n    const resize = () => {\n      width = window.innerWidth\n      height = window.innerHeight\n      canvas.width = width\n      canvas.height = height\n      pixels = []\n      for (let y = 0; y < height / gridSize; y++) {\n        for (let x = 0; x < width / gridSize; x++) {\n          pixels.push([x * gridSize, y * gridSize, gridSize - 2, gridSize - 2, \"transparent\", 1])\n        }\n      }\n    }\n\n    const initColoredPixels = () => {\n      for (let i = 0; i < particleCount; i++) {\n        coloredPixels.push({\n          x: width / 2,\n          y: height / 2,\n          alpha: 0,\n          color: colors[i % colors.length],\n          vx: -1 + Math.random() * 2,\n          vy: -1 + Math.random() * 2,\n        })\n      }\n    }\n\n    const launchPixel = () => {\n      coloredPixels[currentPixel].x = mousePosition.x\n      coloredPixels[currentPixel].y = mousePosition.y\n      coloredPixels[currentPixel].alpha = 1\n\n      currentPixel++\n      if (currentPixel > particleCount - 1) currentPixel = 0\n    }\n\n    const draw = () => {\n      launchPixel()\n      launchPixel()\n      drawGrid()\n      requestAnimationFrame(draw)\n    }\n\n    // Initialize\n    resize()\n    initColoredPixels()\n    draw()\n\n    // Event listeners\n    const handleResize = () => resize()\n    const handleMouseMove = (e: MouseEvent) => {\n      mousePosition.x = e.pageX\n      mousePosition.y = e.pageY\n    }\n    const handleTouchMove = (e: TouchEvent) => {\n      e.preventDefault()\n      mousePosition.x = e.touches[0].pageX\n      mousePosition.y = e.touches[0].pageY\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    document.addEventListener(\"touchstart\", handleTouchMove)\n    document.addEventListener(\"touchmove\", handleTouchMove)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n      window.removeEventListener(\"mousemove\", handleMouseMove)\n      document.removeEventListener(\"touchstart\", handleTouchMove)\n      document.removeEventListener(\"touchmove\", handleTouchMove)\n    }\n  }, [colors, gridSize, particleCount, fadeSpeed, transparentBackground])\n\n  return (\n    <div className={`fixed inset-0 overflow-hidden pointer-events-none ${className}`}>\n      <canvas\n        ref={canvasRef}\n        className=\"absolute inset-0 w-full h-full\"\n        width={100}\n        height={100}\n        style={{ background: transparentBackground ? \"transparent\" : \"#000\" }}\n      />\n    </div>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}